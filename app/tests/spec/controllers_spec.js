// Generated by CoffeeScript 1.3.3
(function() {

  describe("RecordController", function() {
    describe("with no data in localStorage", function() {
      beforeEach(function() {
        return this.weightController = App.WeightController.create();
      });
      it("should have default content value", function() {
        return (expect(this.weightController.content)).toEqual([]);
      });
      it("should indicate that no value has been set yet", function() {
        return (expect(this.weightController.get('updatedAgo'))).toEqual('Value has not been set yet');
      });
      it("should return undefined as the last data entry", function() {
        return (expect(this.weightController.get('previousValue'))).toBeUndefined();
      });
      return it("should return false for updatedInLessThan24h", function() {
        return (expect(this.weightController.updatedInLessThan24h())).not.toBeTruthy();
      });
    });
    describe("with older data in localStorage", function() {
      beforeEach(function() {
        localStorage.setItem('weightData', JSON.stringify([spec.oldRecord]));
        return this.weightController = App.WeightController.create();
      });
      it("should load previous data from localStorage when created", function() {
        (expect(this.weightController.content)).toContain(spec.oldRecord);
        return (expect(this.weightController.content)).not.toContain(spec.recentRecord);
      });
      it("should return correct time of the last entry in human readable form", function() {
        return (expect(this.weightController.get('updatedAgo'))).toEqual('2 days ago');
      });
      it("should return correct value of the last data entry", function() {
        return (expect(this.weightController.get('previousValue'))).toEqual(spec.oldRecord.value);
      });
      return it("should not indicate that it was updated in last 24 hours", function() {
        return (expect(this.weightController.updatedInLessThan24h())).not.toBeTruthy();
      });
    });
    return describe("with recent data in localStorage", function() {
      beforeEach(function() {
        localStorage.setItem('weightData', JSON.stringify([spec.oldRecord, spec.recentRecord]));
        return this.weightController = App.WeightController.create();
      });
      it("should load previous data from localStorage when created", function() {
        (expect(this.weightController.content)).toContain(spec.oldRecord);
        return (expect(this.weightController.content)).toContain(spec.recentRecord);
      });
      it("should return correct time of the last entry in human readable form", function() {
        return (expect(this.weightController.get('updatedAgo'))).toEqual('less than a minute ago');
      });
      it("should return correct value of the last data entry", function() {
        return (expect(this.weightController.get('previousValue'))).toEqual(spec.recentRecord.value);
      });
      return it("should indicate that it was updated in last 24 hours", function() {
        return (expect(this.weightController.updatedInLessThan24h())).toBeTruthy();
      });
    });
  });

}).call(this);
