// Generated by CoffeeScript 1.3.3
(function() {

  describe("StateManager", function() {
    var initApp, loadRecentWeightValue, loadTestData;
    initApp = function() {
      App.weightController = App.WeightController.create({
        content: []
      });
      return App.moodController = App.MoodController.create({
        content: []
      });
    };
    loadTestData = function() {
      localStorage.setItem('weightData', JSON.stringify([spec.oldRecord]));
      return localStorage.setItem('moodData', JSON.stringify([spec.oldRecord]));
    };
    loadRecentWeightValue = function() {
      localStorage.setItem('weightData', JSON.stringify([spec.oldRecord, spec.recentRecord]));
      return localStorage.setItem('moodData', JSON.stringify([spec.oldRecord]));
    };
    describe("without data already inserted", function() {
      beforeEach(function() {
        initApp();
        return this.stateManager = App.StateManager.create();
      });
      return it("should start with state weightState", function() {
        return (expect(this.stateManager.getPath('currentState.name'))).toEqual('weightState');
      });
    });
    describe("with some data already inserted", function() {
      beforeEach(function() {
        loadTestData();
        initApp();
        return this.stateManager = App.StateManager.create();
      });
      return it("should start with state weightState", function() {
        return (expect(this.stateManager.getPath('currentState.name'))).toEqual('weightState');
      });
    });
    return describe("with weight data inserted less than 24 hours ago", function() {
      beforeEach(function() {
        loadRecentWeightValue();
        initApp();
        return this.stateManager = App.StateManager.create();
      });
      return it("should start with state moodState", function() {
        return (expect(this.stateManager.getPath('currentState.name'))).toEqual('moodState');
      });
    });
  });

}).call(this);
